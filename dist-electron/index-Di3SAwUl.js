"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const main = require("./main-BxP3PSrC.js");
exports.BaseName = main.BaseName;
exports.Column = main.Column;
exports.ColumnAliasProxyHandler = main.ColumnAliasProxyHandler;
exports.ColumnBuilder = main.ColumnBuilder;
exports.Columns = main.Columns;
exports.ConsoleLogWriter = main.ConsoleLogWriter;
exports.DefaultLogger = main.DefaultLogger;
exports.DrizzleError = main.DrizzleError;
exports.ExtraConfigBuilder = main.ExtraConfigBuilder;
exports.IsAlias = main.IsAlias;
exports.Many = main.Many;
exports.Name = main.Name;
exports.NoopLogger = main.NoopLogger;
exports.One = main.One;
exports.OriginalName = main.OriginalName;
exports.Param = main.Param;
exports.Placeholder = main.Placeholder;
exports.QueryPromise = main.QueryPromise;
exports.Relation = main.Relation;
exports.Relations = main.Relations;
Object.defineProperty(exports, "SQL", {
  enumerable: true,
  get: () => main.SQL
});
exports.Schema = main.Schema;
exports.StringChunk = main.StringChunk;
exports.Subquery = main.Subquery;
exports.Table = main.Table;
exports.TableAliasProxyHandler = main.TableAliasProxyHandler;
exports.TableName = main.TableName;
exports.TransactionRollbackError = main.TransactionRollbackError;
exports.View = main.View;
exports.ViewBaseConfig = main.ViewBaseConfig;
exports.WithSubquery = main.WithSubquery;
exports.aliasedTable = main.aliasedTable;
exports.aliasedTableColumn = main.aliasedTableColumn;
exports.and = main.and;
exports.applyMixins = main.applyMixins;
exports.asc = main.asc;
exports.between = main.between;
exports.bindIfParam = main.bindIfParam;
exports.createMany = main.createMany;
exports.createOne = main.createOne;
exports.createTableRelationsHelpers = main.createTableRelationsHelpers;
exports.desc = main.desc;
exports.entityKind = main.entityKind;
exports.eq = main.eq;
exports.exists = main.exists;
exports.extractTablesRelationalConfig = main.extractTablesRelationalConfig;
exports.fillPlaceholders = main.fillPlaceholders;
exports.getOperators = main.getOperators;
exports.getOrderByOperators = main.getOrderByOperators;
exports.getTableColumns = main.getTableColumns;
exports.getTableLikeName = main.getTableLikeName;
exports.getTableName = main.getTableName;
exports.gt = main.gt;
exports.gte = main.gte;
exports.haveSameKeys = main.haveSameKeys;
exports.ilike = main.ilike;
exports.inArray = main.inArray;
exports.is = main.is;
exports.isDriverValueEncoder = main.isDriverValueEncoder;
exports.isNotNull = main.isNotNull;
exports.isNull = main.isNull;
exports.isSQLWrapper = main.isSQLWrapper;
exports.isTable = main.isTable;
exports.like = main.like;
exports.lt = main.lt;
exports.lte = main.lte;
exports.mapColumnsInAliasedSQLToAlias = main.mapColumnsInAliasedSQLToAlias;
exports.mapColumnsInSQLToAlias = main.mapColumnsInSQLToAlias;
exports.mapRelationalRow = main.mapRelationalRow;
exports.mapResultRow = main.mapResultRow;
exports.mapUpdateSet = main.mapUpdateSet;
exports.ne = main.ne;
exports.noopDecoder = main.noopDecoder;
exports.noopEncoder = main.noopEncoder;
exports.normalizeRelation = main.normalizeRelation;
exports.not = main.not;
exports.notBetween = main.notBetween;
exports.notExists = main.notExists;
exports.notIlike = main.notIlike;
exports.notInArray = main.notInArray;
exports.notLike = main.notLike;
exports.or = main.or;
exports.orderSelectedFields = main.orderSelectedFields;
Object.defineProperty(exports, "sql", {
  enumerable: true,
  get: () => main.sql
});
